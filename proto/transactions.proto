syntax = "proto3";
import "values.proto";
package google.gink;

/*
    Any integer field marked "timestamp" or "expiry" in this file should be
    assumed to be epoch microseconds.
*/

/**
    Muid: Generally corresponds to the object-id for an object in the
    database, intended to be globally unique.

    * The timestamp and medallion may be omitted (=0) in muids found inside
      rows when they point to another row in the same commit.

    * The medallion may be omitted (=0) for a muid that points to a row
      from the same stream.

    * The offset value of 0 (omitted) referrs to the commit.

    The limits specified below allow a Muid to be packed into a canonical
    16 byte representation: effectively a 128-bit integer that
    corresponds to (timestamp << 72) + (medallion << 20) + offset,
    encoded big-endian.
*/
message Muid {
    uint64 timestamp = 1; // fits into a double exactly until the year 2255.
    uint64 medallion = 2; // less than 2**52, version 1 between 2**48 and 2**49
    uint32 offset = 3; // less than 2**20
}

message Commit {
    uint64 timestamp = 1;
    uint64 medallion = 2;
    uint64 previous_timestamp = 3;
    string comment = 4;
    uint64 chain_start = 5;
    map<uint32, Obj> objects = 8; // key is offset number (> 0 and < 2**20)
}

message Obj {
    oneof body {
        Node node = 1;
        Entry entry = 2;
        Exit exit = 3;
        Title title = 4;
        Property property = 5;
        Metadata metadata = 6;
    }
}

message ValueSpec {
    // TBD
}

message RowSpec {
    map<uint32,string> names = 2;
    map<uint32,ValueSpec> value_specs = 3;
}

message Row {
    oneof mask { // a bitmask indicating which columns are present
        uint64 integer_mask = 1; 
        bytes bytes_mask = 2; // only for when you have more than 63 columns
    }
    repeated Value values = 3;
}

message Property {
    ValueSpec value_spec = 1;
}

message NodeKind {
    Muid extends = 1;
}

message EdgeKind {
    // designated exclusivity from source, e.g. an employee can have 
    // only one manager but a manager can have multiple reports.
    bool exclusive = 1;
    repeated Muid src_node_kinds = 2;
    repeated Muid dst_node_kinds = 3;
}

message Title {
    Muid describes = 1;
    string title = 2;
}

message Metadata {
    Muid describes = 1; // the id of a node entry
    Muid property = 2; // the id of a property
    Value value = 3;  // must adhere to the property's value spec if present
}

message Node {
    enum Behavior {
        UNKNOWN = 0;
        VALUE = 1;
        PROTO2 = 2;
        PROTO3 = 3;
        TABLE = 5;
        INDEX = 6;
        VIEW = 7;
        QUEUE = 8;
        SCHEMA = 9;
        BOX = 10;
        FILE = 11;
        BINLOG = 12;
        SET = 13;
        ENUM = 14;
        SUM = 15;
    }
    oneof contents {
        Muid node_kind = 1;
        Behavior behavior = 2;
    }
    Muid extends = 21; // optional inheritance {TABLE,QUEUE,SCHEMA,PROTO}
    oneof spec { // can be used with a behavior or to describe/limit entries 
        ValueSpec value_spec = 22;
        RowSpec row_spec = 23;
    }
    ValueSpec key_spec = 25; // only when behavior = SCHEMA
}


message Entry {
    Muid src_node = 1; // not present for "root" entry

    message Span {
        uint64 from=1;
        uint64 ends=2;
    }
    oneof link {
        // Note that for behavior in {BOX, QUEUE} there is no link.
        // This includes when setting the root entry (i.e. no src_node).
        Value key = 2;      // only for src_node behavior in {SCHEMA, SET}
        Muid edge_kind = 3; // only when src_node has a node_kind
        Span span = 4;      // only for src_node behavior = FILE
    }
    oneof destination {
        Muid dst_node = 5;
        bool deleting = 6; // only for src_node behavior in {SCHEMA, SET}
        uint64 medallion = 7;
        bytes octects = 8; // for src_node behavior in {FILE, BINLOG}
        Value value = 9;
        Row row = 10; // only when src_node has row_spec
    }
    uint64 expiry = 11; // timestamp of expiration in microseconds since epoch
    bytes iv = 15; // initialization vector when octects are encrypted
    bytes key_id = 16; // optional hint of which key was used (when encrypted)
}

/**
    An "Exit" acts to remove an Entry.  After seeing an Exit pointing to
    an Entry, the system should act as though that Entry no longer exists.
    An expiry set on an Exit makes this removal temporary.  One use case is
    to temporarily remove an item from a work queue to start processing it,
    then permanently remove it once processing has been completed.
    To remove keys from a schema, adding a new Entry with deleting=True 
    is generally better (otherwise prior Entries with earlier timestamps
    will appear to be in effect).
*/
message Exit {
    Muid entry = 1;  // an entry in a QUEUE
    uint64 expiry = 2;
}
